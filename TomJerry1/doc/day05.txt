# day05

MVC 패턴

==> 웹 문서를 만드는 발전된 기술의 하나
	중간에 WAS 서버를 이용해서 분산처리하는 기술
	
	JSP문서가 실행되는 순서
		1. 서버는 클라이언트의 요청을 분석해서 해당 문서를 실행하고 (디스패치 시킨다.)
		2. JSP는 뭔가를 실행해서 데이터를 생산하고(데이터 처리)
		3. 클라이언트에게 응답하는 문서를 작성한다.
		4. 작성된 문서로 응답을 한다.
		
이 과정을 서버 혼자서 담당을 해야한다. 
(중간에 스레드를 자동적으로 처리해서 여러 클라이언트들에게 동시에 응답하도록
	시스템 자체가 만들어져 있다.)
	
그래서 문제가 접속률이 많으면 서버가 다운되는 현상이 생길 수 있다.
이 문제를 해결하기 위해서 서버에 크기가 점점 커지는ㄴ 현상이 생겼다.
요사이는 개인적인 서버를 운영하는 경우도 많아졌고
그 사람들이 서버를 완벽하게 구축할 수 없는 경우도 생겨났다.

이처럼 작은 서버가 담당할 수 있는 프로그램 기법이 필요했다.

이걸을 해결하기 위해서 나온 기법이 분산 시스템이며
이 분산시스템의 하나로 제시된 방법이 바로 MVC패턴이다.

참고 ] 
	컴퓨터로 뭔가 프로그램을 실행하면 그 프로그램에 그 컴퓨터가 자진 모든 자원을 제공하는것은 아니다.
	서버 역시 프로그램의 일종이다.
	따라서 대형 컴퓨터를 사용한다고 해서
	서버가 그 대형 컴퓨터의 자원을 100% 사용할 수 있는 것은 아니다.
	
	분산시스템이 필요한 이유는???
	여러개의 프로그램을 동시에 실행해서 각각의 일을 전담하게 함으로써 
		시스템의 자원을 사용하는 비율을 늘리면서
		그 프로그램이 하는 일은 줄어들게 된다.
	
	결론 
		전체적으로 각각의 프로그램이 부하를 줄임ㄴ서
		문제를 해결할 수 있게 된다.
		
참고 ]
	
	Model 	-	생산된 데이터를  관리하는 기능을 담당한다. 또는 데이터 자체를 의미한다.
				(컨트롤러와 뷰사이에 데이터를 주고 받는 기능)
	View 	-	생선된 데이터를 이용해서 응답문서를 작성하는 기능을 담당한다.
	
	Controller	- 데이터를 생산하는 기능을 담당한다.
					(클라이언트의 요청에 따라 문제를 해결하는 기능을 담당한다.)
					
				1. Dispatch Controller
					==> 서버를 대신해서 요청을 분석해서
						실행문서를 선택하도록 하는 컨트롤러
						==> 이부분이 바로 서블릿으로 제작하는 부분이다.
				2. 일반 Controller
					==> 실제로 데이터를 생산하는 컨트롤러 
					
----------------------------------------------------------------------------------------

HTTP 프로토콜 
==> 단절형 네트워크 방식이다.
	클라이언트가 요청하면 서버는 파일을 응답한 후
	그 즉시 클라이언트와의 접속을 단절시킨다.
	==> 서버는 클라이언트를 관리할 수 없는 상태가 된다.
		(지금 요청한 클라이언트가 로그인을 한 클라이언트인지 아닌지 서버측에서는 구분을 할 수 없다.)
		
		따라서 클라이언트가 준 데이터는 한번만 받을 수 있게된다.
		
		해결방법 ] 
			1. 클라이언트가 접속할 때 마다 고유한 자신만의 번호를 서버에게 알려주기로 약속을 한다.
				
				그 때 알려주는 자신만의 고유번호를 "세션ID"라고 부르기로 한다.
				
			2. 만약 클라이언트가 세션 ID가 없으면 
				서버는 새로운 세션 ID를 발급해 주기로 약속한다.,
			
			3. 이 안에는 필요한 내용을 기록해 놓을 수 있도록 한다.
				==> 이것은 서버가 기록하도록 한다.
				
			4. 따라서 세션을 보면 
				해당 클라이언트의 정보를 파악할 수 있게 되므로 
				단절형 네트워크임에도 불구하고 클라이언트를 관리할 수 있게 되는 것이다.
				
	참고 ] 
		세션 ID는 생명주기를 가지고 있다.
		1. 웹 브라우저가 종료되면 세션 ID가 사라진다..(단, 크롬이 아닌경우에 한해서)
			==> 웹 브라우저마다 세션 ID를 발급하게 된다.
		2. 서버가 세션의 생명을 조절할 수 있다.
			 
	참고 ] 
		session
		==> 세션을 관리하는 내장 객체
			session.getId()	==> 세션에 부여된 아이디를 알아내는 함수
			
			주요함수 ] 
				1. setAttribute("키값", 데이터); ==> 세션에 데이터를 기록하는 함수
				2. getAttribute("키값");		  ==> 세션에 저장된 키값과 짝을 이뤄 저장된 데이터를 추출해주는 함수
				3. removeAttribute("키값");	  ==> 키값에 해당하는 데이터를 삭제하는 함수
				
				4. setMaxInactiveInterval(int interval)
					==> 세션의 생존 주기를 결정하는 함수 
						입력단위는 초단위로 입력한다.